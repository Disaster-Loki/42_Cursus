🐳 Inception (Notas Completas)
1️⃣ CONCEITOS
❓ O que é Docker?
Docker é uma plataforma para desenvolver, entregar e executar aplicações em containers. Ele permite que a aplicação seja isolada do sistema operacional, garantindo que funcione da mesma forma em qualquer ambiente (desenvolvimento, staging ou produção).

⚙️ Conceitos Fundamentais
📦 1. Container
Um ambiente leve, isolado e portátil para rodar sua aplicação.

Compartilha o kernel do host.

Leve: usa menos recursos que VMs.

Isolado: tem seu próprio sistema de arquivos, rede e processos.

Reprodutível: funciona igual em qualquer lugar.

🧱 2. Imagem
Modelo imutável para criar containers.

Contém:

Sistema de arquivos

Bibliotecas e dependências

Código da aplicação

Criadas a partir de um Dockerfile.

📜 3. Dockerfile
Arquivo de texto com instruções para criar uma imagem.

Exemplos de instruções:
FROM alpine
COPY . /app
RUN apk add --no-cache python3
CMD ["python3", "/app/main.py"]
☁️ 4. Docker Hub
Repositório online de imagens Docker (público ou privado).

Você pode:

🔽 pull: baixar imagens existentes.

🔼 push: enviar suas imagens personalizadas.

🔧 5. Docker Engine
Serviço em segundo plano (dockerd) que gerencia imagens, containers, volumes, redes, etc.

2️⃣ COMANDOS DOCKER
🔍 IMAGENS
Ação	Comando
Ver imagens instaladas	docker images
Baixar imagem	docker pull nome:tag
Remover imagem	docker rmi nome
Criar imagem com Dockerfile	docker build -t nome-imagem .
Ver histórico da imagem	docker history nome-imagem
Ver detalhes da imagem	docker inspect nome-imagem
Ver todas camadas de imagens	docker image ls

📦 CONTAINERS
Ação	Comando
Rodar container interativo	docker run -it nome-imagem
Rodar e apagar ao sair	docker run --rm nome-imagem comando
Rodar com nome	docker run --name meucontainer nome-imagem
Rodar em segundo plano	docker run -d nome-imagem
Ver containers ativos	docker ps
Ver todos (ativos e parados)	docker ps -a
Parar container	docker stop id_ou_nome
Iniciar container parado	docker start id_ou_nome
Reiniciar container	docker restart id_ou_nome
Remover container	docker rm id_ou_nome
Ver logs	docker logs id_ou_nome
Acessar container	docker exec -it nome bash
Detalhes do container	docker inspect nome

🚀 PULL / PUSH de IMAGENS
Ação	Comando
Baixar imagem	docker pull nome:tag
Enviar imagem para Docker Hub	docker push usuario/nome:tag
Fazer login no Docker Hub	docker login
Taguear imagem local	docker tag nome-local usuario/nome:tag

🗂️ VOLUMES (Persistência de dados)
Ação	Comando
Criar volume	docker volume create nome
Listar volumes	docker volume ls
Ver detalhes	docker volume inspect nome
Remover volume	docker volume rm nome
Usar volume no container	docker run -v nome:/caminho container
Bind mount (diretório local)	docker run -v $(pwd):/app container

🌐 REDES (Entre containers)
Ação	Comando
Criar rede	docker network create minha-rede
Listar redes	docker network ls
Conectar container	docker network connect minha-rede container
Desconectar container	docker network disconnect minha-rede container
Detalhes da rede	docker network inspect minha-rede

🧼 LIMPEZA
Ação	Comando
Remover containers parados	docker container prune
Remover imagens não utilizadas	docker image prune
Limpar tudo (⚠️ cuidado!)	docker system prune

🧪 OUTROS ÚTEIS
Ação	Comando
Ver versão do Docker	docker --version
Ver info do Docker	docker info
Salvar imagem em arquivo	docker save nome > nome.tar
Carregar imagem de arquivo	docker load < nome.tar

🧱 O QUE É DOCKER COMPOSE (versão mais clara possível)
🧠 O que é o Docker Compose?
Docker Compose é uma ferramenta oficial da Docker.

👉 Serve para definir e executar múltiplos containers Docker de uma vez só, com um único arquivo de configuração.

Esse arquivo se chama: docker-compose.yml.

📄 O que é o docker-compose.yml?
🔤 YML ou YAML?
YAML = "YAML Ain’t Markup Language" → é um tipo de arquivo de texto usado para configurações.

Muito usado em projetos modernos como:

Docker

Kubernetes

GitHub Actions

CI/CD pipelines

O Docker Compose usa o docker-compose.yml para descrever como os containers devem ser configurados e executados.

🤓 Por que as linhas começam com - em YAML?
O - em YAML indica que estamos lidando com uma lista de valores (array).

Exemplo:

yaml
Copy
Edit
cores:
  - azul
  - vermelho
  - verde
Equivale a:

json
Copy
Edit
{
  "cores": ["azul", "vermelho", "verde"]
}
Em docker-compose.yml você usa listas para:

yaml
Copy
Edit
ports:
  - "8000:8000"
✅ EXPLICAÇÃO DO ARQUIVO docker-compose.yml
Exemplo completo:
yaml
Copy
Edit
version: '3.8'

services:
  web:
    build: .
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - logs:/var/logs
    environment:
      - DEBUG=true
    networks:
      - app-network

  db:
    image: postgres:13
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=1234
    networks:
      - app-network

volumes:
  db-data:
  logs:

networks:
  app-network:
🧱 Linha por linha explicada
version: '3.8'
Indica a versão da linguagem Docker Compose.

Use '3.8' para projetos modernos.

services:
Aqui você lista todos os containers que quer rodar.

Cada entrada é um serviço = container.

web: (ou qualquer outro nome)
Nome do serviço (personalizável).

Pode ser web, api, backend, frontend, etc.

build: .
O Compose procura um Dockerfile na pasta atual . para construir a imagem.

image: nome:versão
Usa uma imagem pronta do Docker Hub.

Exemplo: postgres:13 ou redis:alpine.

ports:
yaml
Copy
Edit
ports:
  - "8000:8000"
Mapeia porta da máquina host para o container.

Primeiro número: máquina local.

Segundo número: dentro do container.

volumes: (dois tipos)
Bind Mount (local → container)

yaml
Copy
Edit
volumes:
  - .:/app
Compartilha arquivos entre o host e o container.

Alterar algo localmente reflete no container.

Named Volume (persistência gerenciada pelo Docker)

yaml
Copy
Edit
volumes:
  - db-data:/var/lib/postgresql/data
Persiste dados entre reinicializações.

O volume db-data é gerenciado automaticamente.

environment:
yaml
Copy
Edit
environment:
  - VARIAVEL=valor
Define variáveis de ambiente dentro do container.

Exemplo: DEBUG=true, API_KEY=xyz.

networks: (por serviço)
yaml
Copy
Edit
networks:
  - app-network
Permite que containers se comuniquem entre si.

Os containers podem se referenciar pelo nome do serviço.

volumes: (no final do arquivo)
yaml
Copy
Edit
volumes:
  db-data:
  logs:
Define volumes nomeados globais usados nos serviços.

networks: (no final do arquivo)
yaml
Copy
Edit
networks:
  app-network:
Cria redes personalizadas entre os serviços.

💻 COMANDOS DO DOCKER COMPOSE (todos explicados)
▶️ Subir os containers
docker-compose up
Lê o arquivo docker-compose.yml.

Constrói as imagens (se necessário).

Sobe todos os containers e mostra os logs no terminal.

docker-compose up --build
Igual ao up, mas força reconstrução das imagens mesmo que já existam.

docker-compose up -d
Sobe os containers em segundo plano (detached mode).

🛑 Parar e remover os containers
docker-compose down
Para e remove todos os containers.

Remove a rede e os volumes anônimos (mas não os volumes nomeados).

docker-compose down -v
Remove também os volumes nomeados.

docker-compose stop
Apenas para os containers (não remove).

docker-compose rm
Remove containers parados.

🔄 Outros comandos úteis
docker-compose restart
Reinicia todos os containers.

docker-compose start
Inicia containers parados.

docker-compose exec [serviço] [comando]
Executa um comando em um container rodando.

Exemplo:

bash
Copy
Edit
docker-compose exec web bash
→ Abre terminal dentro do container web.

docker-compose run [serviço] [comando]
Executa um comando em um novo container.

docker-compose ps
Mostra os containers ativos.

docker-compose logs
Mostra os logs de todos os serviços.

bash
Copy
Edit
docker-compose logs -f
→ Segue os logs em tempo real.

🌐 Comunicação entre containers (network interna)
Dentro do docker-compose, os serviços podem se comunicar pelo nome.

Exemplo:

python
Copy
Edit
# Para o serviço web se conectar ao banco
host = "db"
port = 5432
🧪 Exemplo mínimo funcional com Flask + Redis
yaml
Copy
Edit
version: '3.8'

services:
  app:
    build: .
    ports:
      - "5000:5000"
    volumes:
      - .:/app
    environment:
      - DEBUG=true
    networks:
      - app-network

  redis:
    image: redis:alpine
    networks:
      - app-network

networks:
  app-network:
🧼 Usando arquivo .env
Crie um arquivo .env:

env
Copy
Edit
POSTGRES_USER=admin
POSTGRES_PASSWORD=1234
No Compose:

yaml
Copy
Edit
environment:
  - POSTGRES_USER=${POSTGRES_USER}
  - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
🔚 RESUMO FINAL
Conceito	Explicação curta
services:	Cada serviço vira um container separado
build:	Cria imagem a partir do Dockerfile
image:	Usa imagem pronta do Docker Hub
ports:	Mapeia portas: host → container
volumes:	Compartilha pastas ou cria persistência
environment:	Define variáveis de ambiente dentro do container
networks:	Permite que serviços se comuniquem entre si
.env	Arquivo externo com variáveis
- (hífen)	Representa listas em YAML
.yml	Arquivo de configuração com indentação obrigatória


Um daemon (também chamado de "servidor") é um programa que roda em segundo plano no
sistema operacional, executando tarefas automaticamente e sem interrupção. Eles são
essenciais para manter o sistema funcionando, realizando tarefas como controlar
redes, gerenciar arquivos, ou executar serviços em segundo plano. 
Como funcionam os daemons:
    1. Início:
    Os daemons são geralmente iniciados durante o processo de inicialização do
    sistema, através de scripts de inicialização ou do processo init. 

  2. Execução:
  Uma vez iniciados, os daemons geralmente continuam a executar indefinidamente,
  aguardando eventos específicos ou condições para executar suas tarefas. 
  3. Funções:
  Os daemons desempenham diversas funções, como:

    Gerenciar redes: Tratando pedidos de conexão e encaminhando dados. 

Controlar serviços: Executando serviços em segundo plano, como servidores web,
servidores de banco de dados, etc. Monitorar eventos: Reagindo a eventos do
sistema, como alterações em arquivos ou eventos de rede. Realizar tarefas
 agendadas: Executando tarefas em horários específicos, como backups. 

4. Desassociação:
Os daemons são desassociados do terminal de controle, o que significa que eles
não estão diretamente vinculados a uma janela de terminal ou sessão do usuário. 
5. Processo de fundo:
Eles são executados como um processo de fundo, o que significa que eles não 
bloqueiam a interação do usuário. 
6. Manutenção do sistema:
Os daemons são importantes para a manutenção do sistema, garantindo que as 
tarefas do sistema sejam executadas de forma eficiente e confiável. 

Exemplos de daemons:

    NTP Daemon: Sincroniza o relógio do sistema com outros computadores na rede.
    Servidor web: Processa requisições HTTP e entrega páginas web.
    Servidor de banco de dados: Gerencia dados em um banco de dados.
    Cron Daemon: Executa tarefas agendadas. 

Importância dos daemons:
Os daemons são essenciais para o funcionamento de um sistema operacional, pois
 eles executam tarefas que são importantes para o desempenho do sistema, sem 
 interrupção da interação do usuário. Eles são a base de muitos serviços e
 aplicações que usamos diariamente.

==============================
FTP (File Transfer Protocol)
==============================

O que é?
FTP é um protocolo de rede para transferir arquivos entre computadores em uma rede TCP/IP.

Principais conceitos:
- Cliente FTP: Programa que se conecta ao servidor para transferir arquivos.
- Servidor FTP: Programa que recebe conexões e gerencia arquivos.
- Porta padrão: 21 (e portas passivas para dados).
- Autenticação: Normalmente exige usuário e senha.

Comandos básicos no terminal:
- ftp <host> <porta>         # conecta ao servidor FTP
- ls                        # lista arquivos e pastas
- cd <pasta>                # muda de diretório
- pwd                       # mostra diretório atual
- get <arquivo>             # baixa arquivo do servidor
- put <arquivo>             # envia arquivo para o servidor
- mget <arquivos>           # baixa vários arquivos
- mput <arquivos>           # envia vários arquivos
- mkdir <pasta>             # cria pasta
- delete <arquivo>          # apaga arquivo
- bye / quit                # encerra a sessão

Exemplo de sessão:
ftp localhost 21
Usuário: ftpuser
Senha: ftppassword
ls
put arquivo.txt
get outro.txt
bye

Dicas:
- O diretório inicial do usuário FTP é configurado no servidor.
- Permissões dependem do vsftpd.conf.
- Para segurança, prefira SFTP ou FTPS.

==============================
Redis Cache
==============================

O que é?
Redis é um banco de dados em memória, usado como cache, broker de mensagens e estrutura chave-valor.

Principais conceitos:
- Armazenamento em memória: Muito rápido, mas volátil.
- Chave-valor: Dados como pares (key, value).
- Tipos: strings, listas, sets, hashes, sorted sets, etc.
- Persistência opcional.
- Porta padrão: 6379.

Comandos básicos (redis-cli):
- redis-cli                  # abre o terminal do Redis
- set chave valor            # define um valor
- get chave                  # lê um valor
- del chave                  # apaga uma chave
- keys *                     # lista todas as chaves
- incr chave                 # incrementa valor inteiro
- lpush lista valor          # adiciona valor a uma lista
- lrange lista 0 -1          # mostra todos os itens da lista
- flushall                   # apaga todos os dados
- exit                       # sai do redis-cli

Exemplo de uso:
redis-cli
set nome "Joao"
get nome
lpush tarefas "estudar"
lrange tarefas 0 -1
exit

Dicas:
- Redis é muito usado para cache de sessões, filas, contadores e pub/sub.
- Por padrão, não tem autenticação (mas pode ser configurado).
- Use com cuidado para dados críticos, pois a memória é volátil.

==============================
MariaDB (Banco de Dados)
==============================

O que é?
MariaDB é um sistema de gerenciamento de banco de dados relacional, compatível com MySQL.

Principais conceitos:
- SGBD relacional: Armazena dados em tabelas com relações.
- SQL: Linguagem para manipular dados.
- Porta padrão: 3306.
- Usuário, senha e banco configurados na inicialização.

Comandos básicos (mysql):
- mysql -u <user> -p         # conecta ao banco
- SHOW DATABASES;           # lista bancos
- USE <banco>;              # seleciona banco
- SHOW TABLES;              # lista tabelas
- DESCRIBE <tabela>;        # estrutura da tabela
- SELECT * FROM <tabela>;   # mostra dados
- EXIT;                     # sai do mysql

Exemplo de uso:
mysql -u root -p
CREATE DATABASE testdb;
CREATE USER 'user'@'%' IDENTIFIED BY 'senha';
GRANT ALL PRIVILEGES ON testdb.* TO 'user'@'%';
FLUSH PRIVILEGES;
EXIT;

Dicas:
- Use volumes para persistir dados.
- Configure variáveis de ambiente para usuário, senha e banco.

==============================
Nginx (Servidor Web)
==============================

O que é?
Nginx é um servidor web leve e eficiente, usado para servir sites, fazer proxy reverso e balanceamento de carga.

Principais conceitos:
- Servidor web: Responde a requisições HTTP/HTTPS.
- Proxy reverso: Encaminha requisições para outros serviços.
- Porta padrão: 80 (HTTP), 443 (HTTPS).
- Configuração via nginx.conf.

Comandos básicos:
- nginx -t                   # testa configuração
- nginx -s reload            # recarrega configuração
- nginx -v                   # mostra versão

Exemplo de configuração:
server {
    listen 80;
    server_name localhost;
    location / {
        proxy_pass http://wordpress:9000;
    }
}

Dicas:
- Use volumes para mapear nginx.conf.
- Combine com outros serviços via Docker Compose.

==============================
WordPress (CMS)
==============================

O que é?
WordPress é um sistema de gerenciamento de conteúdo (CMS) para criar sites e blogs.

Principais conceitos:
- CMS: Plataforma para criar e gerenciar sites.
- PHP: Linguagem usada pelo WordPress.
- Banco de dados: Usa MariaDB/MySQL.
- Porta padrão: 9000 (PHP-FPM), 80 (via Nginx).

Comandos úteis (no container):
- wp core install            # instala o WordPress
- wp plugin install <nome>   # instala plugin
- wp theme install <nome>    # instala tema
- wp user create ...         # cria usuário

Exemplo de fluxo:
- Nginx recebe requisição HTTP.
- Encaminha para WordPress (PHP-FPM).
- WordPress consulta MariaDB.
- Resposta volta para o usuário.

Dicas:
- Configure wp-config.php com dados do banco.
- Use volumes para persistir uploads e plugins.